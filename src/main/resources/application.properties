spring.datasource.url=jdbc:mysql://localhost:3306/bd_springboot_backend?useSSL=false&serverTimezone=America/Lima&allowPublicKeyRetrieval=true
spring.datasource.username=admin
spring.datasource.password=magadiflo
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=debug

# crear un directorio dentro del proyecto llamado /logs y dentro un archivo spring.log donde spring
# guardara los logs que vaya generando
#logging.file.path=logs <--------------

# crea un archivo con un nombre personalizado dentro del proyecto para guardar los logs generados
logging.file.name=spring-boot-logback.log

# Ahora, creo que podemos usar tanto logging.file.path como logging.file.name cuando queremos especificar nuestra
# propia ubicación específica y nuestro propio nombre específico mostrando primero
# logging.file.path = D:\\folder_name y
# logging.file.name = D:\\folder_name\\nombre_archivo.log

# cambia el formato del log en consola
logging.pattern.console=%d [%thread] %-5level %-50logger{40} : %msg %n
# cambia el formato del log guardado en el archivo de log configurado
logging.pattern.file=%d [%thread] %-5level %-50logger{40} : %msg %n

# cada vez que el archivo de log ocupe 2KB se creara otro archivo .log (default 10 MB)
logging.pattern.rolling-file-name=spring-boot-logback-%d{yyyy-MM-dd}-%i.log
logging.file.max-size=2KB
# tiempo que permanecerá (2 días), luego será eliminado (default 7 days)
logging.file.max-history=2
# La suma de todos los archivos que se hayan generado automáticamente junto al archivo original no deben superar los 20KB
# Caso contrario se irán eliminado hasta que soporte el límite establecido (20KB)
logging.file.total-size-cap=20KB
# forzar la limpieza del archivo de registro al iniciar la aplicación
logging.file.clean-history-on-start=true